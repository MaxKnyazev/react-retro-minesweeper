[{"D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\index.js":"1","D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\App\\index.js":"2","D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\App\\App.js":"3","D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\Game\\index.js":"4","D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\Game\\Game.jsx":"5","D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\GameField\\index.js":"6","D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\GameField\\GameField.jsx":"7","D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\data\\utils.js":"8"},{"size":179,"mtime":1614180205184,"results":"9","hashOfConfig":"10"},{"size":45,"mtime":1614180180362,"results":"11","hashOfConfig":"10"},{"size":672,"mtime":1614180513174,"results":"12","hashOfConfig":"10"},{"size":48,"mtime":1614179955949,"results":"13","hashOfConfig":"10"},{"size":215,"mtime":1614185717664,"results":"14","hashOfConfig":"10"},{"size":63,"mtime":1614180692080,"results":"15","hashOfConfig":"10"},{"size":3154,"mtime":1614871266387,"results":"16","hashOfConfig":"10"},{"size":6192,"mtime":1614781415021,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ueu1d7",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},"D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\index.js",[],["36","37"],"D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\App\\index.js",[],"D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\App\\App.js",[],"D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\Game\\index.js",[],"D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\Game\\Game.jsx",[],"D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\GameField\\index.js",[],"D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\components\\GameField\\GameField.jsx",[],"D:\\__GithubMax--Portfolio\\react-retro-minesweeper\\src\\data\\utils.js",["38"],"// const widthGameField = 10;\r\n// const heightGameField = 10;\r\n// const quantityBombs = 20;\r\n\r\n// let gameField = [];\r\n\r\nexport const createGameField = (w, h) => {\r\n  let field = [];\r\n  for (let i = 0; i < w; i++) {\r\n    field[i] = [];\r\n  }\r\n\r\n  for (let i = 0; i < w; i++) {\r\n    for (let j = 0; j < h; j++) {\r\n      field[i][j] = '-';\r\n    }\r\n  }\r\n  return field;\r\n}\r\n\r\nconst printGameField = (field, w, h) => {\r\n  let s = ``;\r\n  for (let i = 0; i < w; i++) {\r\n    for (let j = 0; j < h; j++) {\r\n      s += `${field[i][j]}  `;\r\n    }\r\n    console.log(s)\r\n    s = '';\r\n  }\r\n}\r\n\r\nconst randomInteger = (min, max) => {\r\n  // случайное число от min до (max+1)\r\n  let rand = min + Math.random() * (max + 1 - min);\r\n  return Math.floor(rand);\r\n}\r\n\r\n// const fillGameFieldWithBombs = (field, w, h, quantity) => {\r\n//   let x, y, countBomb = 0;\r\n//   while (countBomb < quantity) {\r\n//     x = randomInteger(0, w - 1);\r\n//     y = randomInteger(0, h - 1);\r\n//     if(field[x][y] === 0) {\r\n//       field[x][y] = 9;\r\n//       countBomb += 1;\r\n//     }\r\n//   }\r\n// }\r\n\r\nexport const fillGameFieldWithBombs = (field, w, h, quantity, clickX, clickY) => {\r\n  // let field = JSON.parse(JSON.stringify(gF));\r\n  let bombX, bombY, countBomb = 0;\r\n  while (countBomb < quantity) {\r\n    bombX = randomInteger(0, w - 1);\r\n    bombY = randomInteger(0, h - 1);\r\n    if(field[bombX][bombY] === '-') {\r\n      if ((Math.abs(clickX - bombX) > 1)||(Math.abs(clickY - bombY) > 1)) {\r\n        field[bombX][bombY] = 9;\r\n        countBomb += 1;\r\n      }\r\n    }\r\n  }\r\n  return field;\r\n}\r\n\r\nexport const checkBombsAroundElement = (field, x, y, w, h) => {\r\n  let countBombsAroundElement = 0;\r\n  if ((x-1 >= 0)&&(y-1 >= 0)) { \r\n    if (field[x-1][y-1] === 9) { \r\n      countBombsAroundElement += 1; \r\n    } \r\n  }\r\n\r\n  if (y-1 >= 0) {\r\n    if (field[x][y-1] === 9) {\r\n      countBombsAroundElement += 1; \r\n    }\r\n  }\r\n\r\n  if ((x+1 < w)&&(y-1 >= 0)) {\r\n    if (field[x+1][y-1] === 9) {\r\n      countBombsAroundElement += 1;\r\n    }\r\n  }\r\n\r\n  if (x-1 >= 0) {\r\n    if (field[x-1][y] === 9) {\r\n      countBombsAroundElement += 1;\r\n    }\r\n  }\r\n\r\n  if (x+1 < w) {\r\n    if (field[x+1][y] === 9) {\r\n      countBombsAroundElement += 1;\r\n    }\r\n  }\r\n\r\n  if ((x-1 >= 0)&&(y+1 < h)) {\r\n    if (field[x-1][y+1] === 9) {\r\n      countBombsAroundElement += 1;\r\n    }\r\n  }\r\n  \r\n  if (y+1 < h) {\r\n    if (field[x][y+1] === 9) {\r\n      countBombsAroundElement += 1;\r\n    }\r\n  }\r\n  \r\n  if ((x+1 < w)&&(y+1 < h)) {\r\n    if (field[x+1][y+1] === 9) {\r\n      countBombsAroundElement += 1;\r\n    }\r\n  }\r\n\r\n  return countBombsAroundElement;\r\n}\r\n\r\n// const fillGameFieldWithNumbers = (field, w, h) => {\r\n//   for (let i = 0; i < w; i++) {\r\n//     for (let j = 0; j < h; j++) {\r\n//       if (field[i][j] === '-') {\r\n//         field[i][j] = checkBombsAroundElement(field, i, j, w, h)\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\nconst convertStringToArray = (s = '', char) => {\r\n  return s.split(char).map(elem => +elem);\r\n}\r\n\r\nexport const renderEmptyElement = (field, w, h, x, y) => {\r\n  let setOneStep = new Set();\r\n  field[x][y] = 0;\r\n  setOneStep.add(`${x}:${y}`);\r\n\r\n  for (let item of setOneStep) {\r\n    [x, y] = convertStringToArray(item, ':');\r\n    // console.log(`${x}, ${y}`) \r\n\r\n    if ((x-1 >= 0)&&(y-1 >= 0)) {\r\n      field[x-1][y-1] = checkBombsAroundElement(field, x-1, y-1, w, h);\r\n      if (field[x-1][y-1] === 0) {\r\n        setOneStep.add(`${x-1}:${y-1}`);\r\n      }\r\n    }\r\n  \r\n    if (y-1 >= 0) {\r\n      field[x][y-1] = checkBombsAroundElement(field, x, y-1, w, h);\r\n      if (field[x][y-1] === 0) {\r\n        setOneStep.add(`${x}:${y-1}`);\r\n      }\r\n    }\r\n  \r\n    if ((x+1 < w)&&(y-1 >= 0)) {\r\n      field[x+1][y-1] = checkBombsAroundElement(field, x+1, y-1, w, h);\r\n      if (field[x+1][y-1] === 0) {\r\n        setOneStep.add(`${x+1}:${y-1}`);\r\n      }\r\n    }\r\n  \r\n    if (x-1 >= 0) {\r\n      field[x-1][y] = checkBombsAroundElement(field, x-1, y, w, h);\r\n      if (field[x-1][y] === 0) {\r\n        setOneStep.add(`${x-1}:${y}`);\r\n      }\r\n    }\r\n  \r\n    if (x+1 < w) {\r\n      field[x+1][y] = checkBombsAroundElement(field, x+1, y, w, h);\r\n      if (field[x+1][y] === 0) {\r\n        setOneStep.add(`${x+1}:${y}`);\r\n      } \r\n    }\r\n  \r\n    if ((x-1 >= 0)&&(y+1 < h)) {\r\n      field[x-1][y+1] = checkBombsAroundElement(field, x-1, y+1, w, h);\r\n      if (field[x-1][y+1] === 0) {\r\n        setOneStep.add(`${x-1}:${y+1}`);\r\n      } \r\n    }\r\n    \r\n    if (y+1 < h) {\r\n      field[x][y+1] = checkBombsAroundElement(field, x, y+1, w, h);\r\n      if (field[x][y+1] === 0) {\r\n        setOneStep.add(`${x}:${y+1}`);\r\n      }\r\n    }\r\n    \r\n    if ((x+1 < w)&&(y+1 < h)) {\r\n      field[x+1][y+1] = checkBombsAroundElement(field, x+1, y+1, w, h);\r\n      if (field[x+1][y+1] === 0) {\r\n        setOneStep.add(`${x+1}:${y+1}`);\r\n      }\r\n    }\r\n\r\n    // console.log(`${x}, ${y}`);\r\n    // console.log(setOneStep);\r\n  }\r\n\r\n  return field;\r\n}\r\n\r\nexport const isItVictory = (field, w, h) => {\r\n  let countEmptyElements = 0;\r\n  for (let i = 0; i < w; i++) {\r\n    for (let j = 0; j < h; j++) {\r\n      if (field[i][j] === '-') {\r\n        countEmptyElements += 1;\r\n      }\r\n    }\r\n  }\r\n  return !countEmptyElements;\r\n}\r\n\r\n// const compareGameFieldWithTestField = (field, testField, w, h) => {\r\n//   for (let i = 0; i < w; i++) {\r\n//     for (let j = 0; j < h; j++) {\r\n//       if (field[i][j] !== testField[i][j]) {\r\n//         return false;\r\n//       }\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n\r\n\r\n// createGameField(gameField, widthGameField, heightGameField);\r\n// fillGameFieldWithBombs(gameField, widthGameField, heightGameField, quantityBombs, 2, 2);\r\n// fillGameFieldWithNumbers(gameField, widthGameField, heightGameField);\r\n// printGameField(gameField, widthGameField, heightGameField);\r\n\r\n// gameField = [\r\n//   [9, 1, 0, 1, 9],\r\n//   [1, 1, 0, 1, 1],\r\n//   [0, 0, 0, 0, 0],\r\n//   [1, 1, 0, 1, 1],\r\n//   [9, 1, 0, 1, 9]\r\n// ];\r\n// console.log(gameField[2][0])\r\n// renderEmptyElement(gameField, 2, 2, widthGameField, heightGameField);\r\n// printGameField(gameField, widthGameField, heightGameField);\r\n\r\n// renderEmptyElement(gameField, 1, 2, widthGameField, heightGameField);\r\n// printGameField(gameField, widthGameField, heightGameField);",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":21,"column":7,"nodeType":"45","messageId":"46","endLine":21,"endColumn":21},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'printGameField' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]